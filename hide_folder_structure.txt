/hide_framework/
|
|-- adapters/                 # Domain configuration files (YAMLs)
|   |-- dark_pools.yaml
|   |-- energy_theft.yaml
|   |-- blockchain_aml.yaml
|   `-- supply_chain.yaml
|
|-- data/                     # Local datasets (as fallbacks or primary sources)
|   |-- finra_quarterly/
|   |   `-- (FINRA .xlsx files go here)
|   |-- energy/
|   |   `-- household_power_consumption.txt
|   `-- elliptic/
|       |-- elliptic_txs_classes.csv
|       |-- elliptic_txs_edgelist.csv
|       `-- elliptic_txs_features.csv
|
|-- models/                   # OUTPUT: Saved/trained model artifacts (.joblib, .pth)
|
|-- notebooks/                # For exploratory data analysis and research
|
|-- reports/                  # OUTPUT: Generated HTML reports
|
|-- src/
|   `-- hide/
|       |-- __init__.py
|       |
|       |-- core/             # Core, domain-agnostic framework components
|       |   |-- __init__.py
|       |   |-- adapters.py   # Loads YAML configs
|       |   |-- ingestion.py  # Master data ingestion router
|       |   |-- pipeline.py   # Generic, strategy-driven pipeline orchestrator
|       |   `-- reporting.py  # Generic HTML report generator
|       |
|       `-- strategies/       # All domain-specific logic is encapsulated here
|           |-- __init__.py
|           |-- base_strategy.py  # The "interface" for all strategies
|           |
|           |-- dark_pools/
|           |   |-- __init__.py
|           |   `-- strategy.py   # Implements Unsupervised model + SHAP
|           |
|           |-- energy_theft/
|           |   |-- __init__.py
|           |   `-- strategy.py   # Implements FFT time-series analysis
|           |
|           |-- blockchain_aml/
|           |   |-- __init__.py
|           |   `-- strategy.py   # Implements GraphSAGE GNN model
|           |
|           `-- supply_chain/
|               |-- __init__.py
|               `-- strategy.py   # Implements LSTM Autoencoder model
|
|-- tests/                    # Unit and integration tests
|
|-- README.md                 # The main project documentation
|-- requirements.txt          # All Python package dependencies
|-- Dockerfile                # For creating a reproducible containerized environment
|-- train.py                  # **NEW:** Command-line script to train models
`-- score.py                  # **NEW:** Command-line script to run predictions

1) Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope Process
2) .\venv\Scripts\Activate.ps1
3)  pip install -r requirements.txt
4) python hide_mvp_exec.py <mode>